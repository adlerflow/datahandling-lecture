---
title: 'Data Handling: Import, Cleaning and Visualisation'
author: "Dr. Aur√©lien Sallin"
subtitle: 'Lecture 6:<br>Non-rectangular data'
date: "2024-10-24"
echo: false
code-line-numbers: false
format:
  revealjs:
    template-partials:
       - ../../style/title-slide.html
    width: 1280
    height: 720
    smaller: true
    embed-resources: true
    self-contained: true
    slide-number: c
    theme: ../../style/hsgtheme.scss
highlight-style: dracula 
cache: false
---

```{r set-options, echo=FALSE, message=FALSE, warning=FALSE, cache=FALSE}
options(width = 100)
library(knitr)
library(dplyr)
library(readr)
```




# Recap

## Goals of last lecture

- Understand how we import rectangular data into R
- Be familiar with the way csv parsers work
- Exercise: import, read, and manipulate financial data from a text file


## Recap: parsing CSVs in R

- `readr`, `read_csv()`, `read_delim()` to parse csvs
  - Return a `tibble`. 
- parsing, encoding, and guessing the right type: `guess_parser()`
```{r, echo = TRUE}
read_csv('A,B
         12:00, 12:00
         14:30, midnight
         20:01, noon')
```

## Recap: tibbles and data frames

- tibbles in `tidyverse()`
- basic manipulation of data frames and tibbles
- built-in datasets


## Recap: exercise

#### Read financial data with another separator and with encoding problems.
```{r, echo = TRUE, eval = FALSE}
financial_data <- read.csv("financial_data.txt", sep = ":")
financial_data <- read_delim("financial_data.txt", delim = ":")
```

- Error with `read.csv()`: "invalid multibyte string at <f6>".
- No error with `read_delim()`: more robust to encoding issues!

## Recap: exercise

With `iconv()`, we found the right encoding for `\xF6`. We could then import the data using

```{r warning=FALSE, eval = FALSE, output = FALSE, echo=TRUE}
iconv("\xF6", from = "ISO-8859-1", to = "UTF-8")
financial_data <- read.csv("financial_data.txt", 
                           sep = ":",
                           fileEncoding = "ISO-8859-1")
```

However, because of the special character, the column was read as a character. We replaced the value and coerced the whole column to numeric.

```{r warning=FALSE, eval = FALSE, output = FALSE, echo=TRUE}
financial_data[10, "Revenue"] <- 1933
financial_data[, "Revenue"] <- as.numeric(financial_data[, "Revenue"])
```


## Coercion with comparison operators (but not with mathematical operators)

<!-- :::: {.columns} -->

<!-- ::: {.column width="50%"} -->

#### Last time, we saw that...


```{r,echo = TRUE}
2 == "2"
```
<br>

Using:
```{r, echo = TRUE, eval = FALSE}
?"=="
```

::: {style="font-size: 80%;"}
*"If the two arguments are atomic vectors of different types, one is coerced to the type of the other, the (decreasing) order of precedence being character, complex, numeric, integer, logical and raw."*
:::

<!-- ::: -->

<!-- ::: {.column width="40%"} -->

##

#### ... which is for me a good reminder that...
```{r rmeme, echo=FALSE, out.width = "70%", fig.align='center', purl=FALSE}
include_graphics("../../img/Rmeme.jpg")
```
<!-- ::: -->
<!-- :::: -->



# Warm-up 

## Coercion of boolean values

This question checks your understanding of the coercion of boolean values.

What is the output of the following code?
```{r echo = TRUE, eval = FALSE}
my_vector <- c(1, 0, 3, -1)
as.numeric(my_vector > 0)
```

- `"TRUE" "FALSE" "TRUE" "FALSE"`
- `TRUE FALSE TRUE FALSE`
- `1 0 1 0`
- `0 1 0 1`


## Data frames operations

Consider the data frame

```{r echo = TRUE}
dataCHframe <- data.frame(
  "City" = c("St.Gallen", "Lausanne", "Z√ºrich"),
  "PartyLeft" = c(35, 45, 55),
  "PartyRight" = c(40, 35, 30)
)
```

Which of these statements are TRUE?

- `dataCHframe$PartyCenter <- c(25, 20, 15)` creates a new variable called "PartyCenter"
- `dim(dataCHframe[, dataCHframe$PartyLeft > 40])` returns the same as `dim(dataCHframe[, c(2,3)])`
- `dim(dataCHframe[dataCHframe$PartyLeft > 40 | dataCHframe$PartyLeft < 40, ])` returns `c(3,3)`
- `dataCHframe` is a data.frame, which is a list consisting of one named character vector and two named integer vectors.

<!-- The second question is about recycling of logical vectors... -->
<!-- ```{r echo = TRUE} -->
<!-- dataCHframe <- data.frame( -->
<!--   "City" = c("St.Gallen", "Lausanne", "Z√ºrich"), -->
<!--   "PartyLeft" = c(35, 45, 55), -->
<!--   "PartyRight" = c(40, 35, 30), -->
<!--   "PartyCenter" = c(25, 20, 15) -->
<!-- ) -->

<!-- dim(dataCHframe[, dataCHframe$PartyLeft < 40]) -->
<!-- dim(dataCHframe[, dataCHframe$PartyLeft == 45, drop = F]) -->
<!-- dim(dataCHframe[, c(2,3)]) -->

<!-- #If the index vector is shorter than the vector being indexed, the index vector is recycled -->
<!-- x <- c(5,4,7,8) -->

<!-- x[c(FALSE, TRUE)] -->
<!-- #> [1] 4 8 -->
<!-- ``` -->


## Working with csv files

You want to import a file using `read_delim()`. Describe what `read_delim()` does under the hood. What should be added to this command in order for it to work?

<!-- 1. recognize the separator and EOL -->
<!-- 2. use `guess_parser` to understand what data *type* hides behind each data structure -->
<!-- 3.  -->


## Tibbles

Consider the following code

```{r, echo = TRUE}
df <- data.frame(a = c(1,2,3,4),
                 b = c("au", "de", "ch", "li"))
```

Are these statements TRUE or FALSE?

- `mean(df$a) == 2.5`
- `typeof(as.matrix(df)[,1])` is `numeric` (or `double`)
- `as_tibble(df)[1:2, 1]` contains the same information as `df[1:2, 1]` (FALSE, because tibbles do not simplify when subsetting. Not exam relevant.)


<!-- ```{r, echo = TRUE} -->
<!-- as.matrix(df)[,1] -->

<!-- # Tibbles behave differently because they do not simplify when subsetting. -->
<!-- tibble::as_tibble(df)[1:2, 1]  -->

<!-- # The output will be a vector, not a data frame. This is because data frames simplify the result by default when you extract a single column. -->
<!-- df[1:2, 1]  -->

<!-- # If you want a data frame (or tibble) to behave like a tibble and avoid simplification when subsetting, you can use drop = FALSE in base R -->
<!-- df[1:2, 1, drop = FALSE]  -->

<!-- # If you want to extract a vector from a tibble, you can use double square brackets ([[]]) for extracting a single column: -->
<!-- tibble::as_tibble(df)[[1]] -->
<!-- ``` -->
<!-- The difference in the output between tibble::as_tibble(df)[1:2, 1] and df[1:2, 1] is due to how tibbles and data frames handle subsetting. -->
<!-- This behavior is called simplifying subsetting, where a data frame automatically simplifies to a vector if only a single column is extracted. This is not the case for tibbles, which always return a tibble when subsetting. -->


## {class="inverse"}

Today

## Goals of today's lecture

- Understand non-rectangular data: xml, json, and html (exercises and next time)
- Be familiar with the way we parse these data into R 

<br>
- ["Non-Rectangular Data in Economic Research"]{style="color:#02934a;"} with Minna Heim



## Updates

- Exam for exchange students üéÅ: **19.12.2024** at 16:15 in room 01-207.
- The mock exam is available on Canvas
- The reading list will be updated in the break






# Non-rectangular data structures

## Non-rectangular data

- Hierarchical data (xml, html, json)
  - <span style="color: gray">XML and JSON (useful for complex/high-dimensional data sets)</span>.
  - <span style="color: gray">HTML (a markup language to define the structure and layout of webpages)</span>.
- Unstructured text data
- Images/Pictures data 



## A rectangular data set

```
father mother  name     age  gender
               John      33  male
               Julia     32  female
John   Julia   Jack       6  male
John   Julia   Jill       4  female
John   Julia   John jnr   2  male
               David     45  male
               Debbie    42  female
David  Debbie  Donald    16  male
David  Debbie  Dianne    12  female

```

<br>

<center>
### üëì What is the data about?
</center>


## A rectangular data set

```
father mother  name     age  gender
               John      33  male
               Julia     32  female
John   Julia   Jack       6  male
John   Julia   Jill       4  female
John   Julia   John jnr   2  male
               David     45  male
               Debbie    42  female
David  Debbie  Donald    16  male
David  Debbie  Dianne    12  female

```
<br>

<center>
### Which observations belong together?
</center>


## A rectangular data set

```
father mother  name     age  gender
               John      33  male
               Julia     32  female
John   Julia   Jack       6  male
John   Julia   Jill       4  female
John   Julia   John jnr   2  male
               David     45  male
               Debbie    42  female
David  Debbie  Donald    16  male
David  Debbie  Dianne    12  female

```
<br>

<center>
### Can a parser understand which observations belong together?
</center>


<!-- As we observed in the previous chapter, the CSV structure has some disadvantages when representing more complex data in a text file. This is in particular true if the data contains nested observations (i.e., hierarchical structures). While a representation in a CSV file is theoretically possible, it is often far from practical to use other formats for such data. On the one hand, it is likely less intuitive to read the data correctly. On the other hand, storing the data in a CSV file might introduce a lot of redundancy. That is, the identical values of some variables would have to be repeated in the same column. The following code block illustrates this point for a data set on two families ([@murrell_2009], p. 116). -->

<!-- From simply looking at the data, we can make the best guess which observations belong together (are one family). However, the implied hierarchy is not apparent at first sight. While it might not matter too much that several values have to be repeated several times in this format, given that this data set is so small, the repeated values can become a problem when the data set is much larger. For each time `John` is repeated in the `father`column, we use 4 bytes of memory. Suppose millions of people are in this data set, and we have to transfer this data set very often over a computer network. In that case, these repetitions can become quite costly (as we would need more storage capacity and network resources). -->




# Deciphering XML

## XML - eXtensible Markup Language
- Since 1998
- Real life examples:
  - Microsoft Office uses the XML-based file formats, such as .docx, .xlsx, and .pptx. See a XML representation of a Word document on [the Wikipedia page on Microsoft Office XML format](https://en.wikipedia.org/wiki/Microsoft_Office_XML_formats).
  - Store application configuration data
  - Store geospatial data in Geographic Information Systems (GIS) 
  - ...
  

## COVID-19 data in XML format

<center>
#### What features does the format have? What is its logic/syntax?
</center>


```{xml, echo = TRUE}
<?xml version="1.0" encoding="UTF-8"?>
<data>
  <row>
    <unique_id>216498</unique_id>
    <indicator_id>386</indicator_id>
    <name>Ozone (O3)</name>
    <measure>Mean</measure>
    <measure_info>ppb</measure_info>
    <geo_type_name>CD</geo_type_name>
    <geo_join_id>313</geo_join_id>
    <geo_place_name>Coney Island (CD13)</geo_place_name>
    <time_period>Summer 2013</time_period>
    <start_date>2013-06-01T00:00:00</start_date>
    <data_value>34.64</data_value>
  </row>
  
  <row>
    <unique_id>216499</unique_id>
    <indicator_id>386</indicator_id>
    ...
  </row>
</data>
```

<!-- - A predefined set of special characters (here primarily `<`, `>`, and `/` ) give the data structure.  -->
<!-- - So-called *XML-tags* are used to define variable names and encapsulate data values: `<variablename>value</variablename>`. -->
<!-- - Tags can be nested, which allows for the definition of hierarchical structures. -->

## XML declaration

An XML document begins with some information about XML itself. For example, it might mention the XML version that it follows. This opening is called an XML declaration. 

```{xml, echo = TRUE}
<?xml version="1.0" encoding="UTF-8"?>
```

## XML has a nested syntax

The "row-content" is nested between the '`row`'-tags:

```{xml, echo = TRUE}
<row>
...
</row>
```


## XML has a nested syntax... similar to a tree structure

```{xml, echo = TRUE}
<root>
  <child>
    <subchild>.....</subchild>
  </child>
</root>
```



## XML syntax: Temperature Data example

There are two principal ways to link variable names to values.
```{xml, echo = TRUE}
<?xml version="1.0" encoding="UTF-8"?>
<dataset>
  <variable>Monthly Surface Clear-sky Temperature (ISCCP) (Celsius)</variable>
  <filename>ISCCPMonthly_avg.nc</filename>
  <filepath>/usr/local/fer_data/data/</filepath<|meta_end|>filepath>
  <badflag>-1.E+34</badflag>
  <subset>48 points (TIME)</subset>
  <longitude>123.8W(-123.8)</longitude>
  <latitude>48.8S</latitude>
  <case date="16-JAN-1994" temperature="9.200012" />
  <case date="16-FEB-1994" temperature="10.70001" />
  <case date="16-MAR-1994" temperature="7.5" />
  <case date="16-APR-1994" temperature="8.100006" />
</dataset>
```


## XML syntax

There are two principal ways to link variable names to values.

:::: {.columns}

::: {.column width="50%"}
1. Define opening and closing XML-tags with the variable name and surround the value with them:

```{xml, echo = TRUE}
<filename>ISCCPMonthly_avg.nc</filename>
```
:::

::: {.column width="50%"}
2. Encapsulate the values within one tag by defining tag-attributes:

```{xml, echo = TRUE}
<case date="16-JAN-1994" temperature="9.200012" /> 
```
:::
::::

## XML syntax

:::: {.columns}

::: {.column width="50%"}
Attributes-based:

```{xml,echo = TRUE}
  <case date="16-JAN-1994" temperature="9.200012" />
  <case date="16-FEB-1994" temperature="10.70001" />
  <case date="16-MAR-1994" temperature="7.5" />
  <case date="16-APR-1994" temperature="8.100006" />
```
:::

::: {.column width="50%"}
Tag-based:

```{xml, echo = TRUE}
  <cases>    
    <case>
      <date>16-JAN-1994<date/>
      <temperature>9.200012<temperature/>
    <case/>
    <case>
      <date>16-FEB-1994<date/>
      <temperature>10.70001<temperature/>
    <case/>
    <case>
      <date>16-MAR-1994<date/>
      <temperature>7.5<temperature/>
    <case/>
    <case>
      <date>16-APR-1994<date/>
      <temperature>8.100006<temperature/>
    <case/>
  <cases/>
```
:::
::::



## Insights: CSV vs. XML

 - Represent much more *complex (multi-dimensional)* data in XML-files than what is possible in CSVs.
 - Self-explanatory syntax: *machine-readable and human-readable*. 
 - Tags are part of the syntax, give both structure and name variables.


## Insights: CSV vs. XML

Potential drawback of XML: **inefficient storage**

  - Tags are part of the syntax, thus, part of the actual file.
      - Tags (variable labels) are *repeated* again and again!
      - CSV: variable labels are mentioned once.
      - Potential solution: data compression (e.g., zip).
  - If the data is actually two dimensional, a CSV is more practical.


# Parsing XML

## XML in R with *The Office*

```{xml, echo = TRUE}
<?xml version="1.0" encoding="UTF-8"?>
<company_dundermifflin>
  <person id="1">
    <name>Michael Scott</name>
    <position>Regional Manager</position>
    <location branch="Scranton"/>
  </person>
  <person id="2">
    <name>Dwight Schrutte</name>
    <position>Assistant (to the) Regional Manager</position>
    <location branch="Scranton"/>
    <orders>
      <sales>
        <units>10</units>
        <product>paper A4</product>
      </sales>
    </orders>
  </person>
  <person id="3">
    <name>Jim Halpert</name>
    <position>Sales Representative</position>
    <location branch="Scranton"/>
    <orders>
      <sales>
        <units>20</units>
        <product>paper A4</product>
      </sales>
      <sales>
        <units>5</units>
        <product>paper A3</product>
      </sales>
    </orders>
  </person>
</company_dundermifflin>
```


## Load a XML file in R

```{r eval=FALSE, echo = TRUE}
# load packages
library(xml2) # updated and faster than library `XML` 

# parse XML, represent XML document as R object
xml_doc <- read_xml("company_dundermifflin.xml")
xml_doc
```


```{r echo=FALSE, warning=FALSE}
# load packages
library(xml2)

# parse XML, represent XML document as R object
xml_doc <- read_xml("../../data/company_dundermifflin.xml")
xml_doc
```

```{r echo=TRUE, warning=FALSE}
# length of the html
xml_length(xml_doc) 
```


## Identify the root-node and the children

'company_dundermifflin' is the root-node, 'persons' are its children:

```{r, echo = TRUE}
# navigate downwards
persons <- xml_children(xml_doc) # returns only elements
persons

xml_child(xml_children(xml_doc), 1)
```


## Navigate sidewards

```{r, echo = TRUE}
# navigate sidewards
persons[1]
xml_siblings(persons[1])
```

## Navigate upwards
```{r, echo = TRUE}
# navigate upwards (all the levels)
xml_parents(persons)

# navigate upwards (one level)
xml_parent(persons)
```


## Extract specific parts of the data

```{r, echo = TRUE}
# find data via XPath
sales <- xml_find_all(xml_doc, xpath = ".//sales")
sales
xml_text(sales) # extract the data as text

position <- xml_find_all(xml_doc, xpath = ".//position")
position
```


## Create a data frame with sales

#### Try to extract the sales data from the xml file at home. What is the difference between // and / in the xpath?

```{r, echo = TRUE}
#| code-fold: true
#| code-summary: "Show the code"

# Extract all <person> nodes with sales information
# [orders] is a predicate that filters the <person> elements to only those that contain at least one <orders> child node.
persons_with_sales <- xml_find_all(xml_doc, "//person[orders]")

# Initialize an empty dataframe to store sales data
sales_df_final <- data.frame(name = NA, units = NA, product = NA)

for (i in 1:2) { # There are two persons with sales here. 
  person <- persons_with_sales[i]
  
  # Extract person's name
  name <- xml_text(xml_find_first(person, "./name"))
  
  # Extract sales nodes
  sales <- xml_find_all(person, ".//sales")
  units <- xml_text(xml_find_all(sales, "./units"))
  product <- xml_text(xml_find_all(sales, "./product"))
  
  # Create a data frame for the person's sales
  sales_person <- data.frame(
    name = name,
    units = as.numeric(units),
    product = product
  )
  
  sales_df_final <- rbind(sales_df_final, sales_person)
}

sales_df_final
```



# Deciphering JSON

## JavaScript Object Notation (JSON)

- Text-based format used for representing structured and based on JavaScript object syntax.
- Used for data exchange between a server and a web application


## JSON syntax
  
  - Key difference to XML: no tags, but *attribute-value pairs*.
  - A substitute for XML (often encountered in similar usage domains).


## 
:::: {.columns}

::: {.column width="50%"}

*XML:*
```{xml, echo = TRUE}
<person>
  <firstName>John</firstName>
  <lastName>Smith</lastName>
  <age>25</age>
  <address>
    <streetAddress>21 2nd Street</streetAddress>
    <city>New York</city>
    <state>NY</state>
    <postalCode>10021</postalCode>
  </address>
  <phoneNumber>
    <type>home</type>
    <number>212 555-1234</number>
  </phoneNumber>
  <phoneNumber>
    <type>fax</type>
    <number>646 555-4567</number>
  </phoneNumber>
  <gender>
    <type>male</type>
  </gender>
</person>

```

:::

::: {.column width="50%"}


*JSON:*
```{json, echo = TRUE}
{"firstName": "John",
  "lastName": "Smith",
  "age": 25,
  "address": {
    "streetAddress": "21 2nd Street",
    "city": "New York",
    "state": "NY",
    "postalCode": "10021"
  },
  "phoneNumber": [
    {
      "type": "home",
      "number": "212 555-1234"
    },
    {
      "type": "fax",
      "number": "646 555-4567"
    }
  ],
  "gender": {
    "type": "male"
  }
}
```

:::
::::

<!-- Objects: {} enclose objects, which are key-value pairs (e.g., "name": "John Doe", "age": 30). -->
<!-- Arrays: [] enclose arrays, such as the "skills" list in the example (["R", "Python", "SQL"]). -->
<!-- Values: Values can be strings (e.g., "John Doe"), numbers (e.g., 30), booleans (e.g., true), arrays, or other objects (like the nested "address" object). -->

---

## 
:::: {.columns}

::: {.column width="50%"}

*XML:*
```{xml, echo = TRUE}
<person>
  <firstName>John</firstName>
  <lastName>Smith</lastName>
</person>
```

:::

::: {.column width="50%"}

*JSON:*
```{json, echo = TRUE}
{
  "firstName": "John",
  "lastName": "Smith",
}
```

:::
::::

## 

```{r echo=FALSE, fig.align="center", out.width="90%"}
include_graphics("../../img/hierarch_data_dark.jpg")
```


# Parsing JSON


## JSON in R

```{r eval=FALSE, echo = TRUE}
# load packages
library(jsonlite)

# parse the JSON-document shown in the example above
json_doc <- fromJSON("data/person.json")

# look at the structure of the document
str(json_doc)
```

```{r echo=FALSE, message=FALSE }
# load packages
library(jsonlite)

# parse the JSON-document shown in the example above
json_doc <- fromJSON("../../data/person.json")

# look at the structure of the document
str(json_doc)
```


## JSON in R

The nesting structure is represented as a *nested list*:

```{r, echo = TRUE}
# navigate the nested lists, extract data
# extract the address part
json_doc$address

# extract the gender (type)
json_doc$gender$type
```


## Happy break!!!
```{r break, echo=FALSE, out.width = "100%", fig.align='center'}
include_graphics("../../img/midjourney_break.png")
```


<!-- # HTML: Websites -->

<!-- ## HTML: Code to build webpages -->

<!-- [HyperText Markup Language (HTML)](https://en.wikipedia.org/wiki/HTML), designed to be read by a web browser.  -->


<!-- ```{r echo=FALSE, fig.align="center", out.width="60%"} -->
<!-- include_graphics("../../img/website_screen.jpg") -->
<!-- ``` -->



<!-- ## HTML documents: code and data! -->

<!-- HTML documents/webpages consist of *'semi-structured data'*:  -->

<!--   - A webpage can contain a HTML-table (*structured data*)... -->
<!--   - ...but likely also contains just raw text (*unstructured data*). -->

<!-- ---- -->

<!-- ```{html} -->
<!--      <!DOCTYPE html> -->

<!--      <html> -->
<!--          <head> -->
<!--              <title>hello, world</title> -->
<!--          </head> -->
<!--          <body> -->
<!--              <h2> hello, world </h2> -->
<!--          </body> -->
<!--      </html> -->
<!-- ``` -->

<!-- <center> -->
<!-- #### Similarities to other formats? -->
<!-- </center> -->




<!-- ## HTML document as a 'tree' -->

<!-- ```{r dom, echo=FALSE, fig.align="center", out.width="60%"} -->
<!-- include_graphics("../../img/dom_tree_dark.jpg") -->
<!-- ``` -->


<!-- ## Two ways to read a webpage into R -->

<!-- In this example, we look at [Wikipedia's Economy of Switzerland page](https://en.wikipedia.org/wiki/Economy_of_Switzerland). -->

<!-- ```{r swiss, echo=FALSE, out.width = "50%", fig.align='center', fig.cap= "Source: https://en.wikipedia.org/wiki/Economy_of_Switzerland"} -->
<!-- include_graphics("../../img/1_SwissGDP.png") -->
<!-- ``` -->


<!-- ## Tutorial (advanced): Importing data from a HTML table  -->

<!-- -> Exercise session this afternoon! -->



<!-- # Text as Data and Image Data -->

<!-- ## Text as Data and Image Data -->

<!--  - Extract text from historical documents (scan, use OCR) -->
<!--  - Use machine learning to label text (too costly to do manually) -->
<!--  - Extract information from maps -->

<!-- ## Text as Data -->

<!-- Text is unstructured data. Text analysis and feature extraction is the basis for new -->
<!-- genAI models! -->

<!-- -> check the code example on Canvas. -->


<!-- ## Image Data -->

<!-- - Check the code example on Canvas. -->
<!-- - Good example on how arrays are used in `R`. -->








<!-- ## Handling text data for analysis -->


<!-- ```{r nlppipeline, echo=FALSE, out.width = "95%", fig.align='center',  purl=FALSE} -->
<!-- include_graphics("../../img/nlp_pipeline_dark.jpg") -->
<!-- ``` -->

<!-- ## Data structure: text corpus -->


<!-- ```{r corpus, echo=FALSE, out.width = "35%", fig.align='center',  purl=FALSE} -->
<!-- include_graphics("../../img/text_corpus_dark.jpg") -->
<!-- ``` -->


<!-- ## Working with text data in R: Quanteda -->


<!-- ```{r packages, echo=FALSE} -->
<!-- # Install/load packages -->
<!-- pacman::p_load( -->
<!--     tidytext, -->
<!--     quanteda, -->
<!--     readtext, -->
<!--     stringr, -->
<!--     quanteda.textstats, -->
<!--     quanteda.textplots -->
<!-- ) -->
<!-- ``` -->


<!-- # Image Data -->


<!-- ## Basic data structures -->

<!--  - *Raster images*: a matrix of pixels, as well as the color of each pixel. -->
<!--  - *Vector-based images*: text files that store the coordinates of points on a surface and how these dots are connected (or not) by lines. -->

<!-- ## Raster images -->

<!-- ```{r rgb, echo=FALSE, out.width = "75%", fig.align='center', purl=FALSE} -->
<!-- include_graphics("../../img/rgb_structure.jpg") -->
<!-- ``` -->

<!-- ## Raster and vector images in R -->


<!-- ## Use cases in economic research and beyond -->

<!--  - Extract text from historical documents (scan, use OCR) -->
<!--  - Use machine learning to label text (too costly to do manually) -->
<!--  - Extract information from maps -->









